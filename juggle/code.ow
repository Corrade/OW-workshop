settings
{
    main
    {
        Description: "To keep an opponent in the air by hitting them repeatedly. Based on endif from TF2. Both TDM and DM are supported."
    }

    lobby
    {
        Match Voice Chat: Enabled
        Max Spectators: 12
    }

    modes
    {
        Deathmatch
        {
            enabled maps
            {
                Workshop Chamber
            }
        }

        General
        {
            Game Mode Start: Immediately
            Spawn Health Packs: Disabled
        }
    }

    heroes
    {
        General
        {
            Ultimate Generation: 25%

            Ana
            {
                No Scope: On
            }

            Bastion
            {
                Damage Dealt: 50%
                Infinite Ultimate Duration: On
                Primary Fire: Off
                Spawn With Ultimate Ready: On
            }

            Brigitte
            {
                Barrier Shield: Off
                Whip Shot Cooldown Time: 15%
            }

            Mei
            {
                Cryo-Freeze: Off
            }

            Reinhardt
            {
                Barrier Field: Off
                Fire Strike Cooldown Time: 5%
            }

            Roadhog
            {
                Primary Fire: Off
                Ultimate Ability Whole Hog: Off
            }

            Sigma
            {
                Experimental Barrier: Off
                Kinetic Grasp: Off
            }

            Soldier: 76
            {
                Helix Rockets Cooldown Time: 15%
                Primary Fire: Off
                Ultimate Ability Tactical Visor: Off
            }

            Symmetra
            {
                Primary Fire: Off
                Sentry Turret: Off
                Ultimate Ability Photon Barrier: Off
            }

            Torbj√∂rn
            {
                Deploy Turret: Off
                Secondary Fire: Off
            }

            Tracer
            {
                Primary Fire: Off
                Ultimate Generation - Combat Pulse Bomb: 500%
                Ultimate Generation Pulse Bomb: 500%
            }

            Zarya
            {
                Damage Dealt: 200%
                Particle Barrier: Off
                Primary Fire: Off
                Projected Barrier: Off
            }

            disabled heroes
            {
                Ashe
                Baptiste
                D.Va
                McCree
                Moira
                Orisa
                Reaper
                Sombra
                Widowmaker
                Winston
                Wrecking Ball
            }
        }
    }
}



variables
{
    global:
        0: score_to_win
        1: height
        2: passive_heal_per_sec
        3: leap_speed
        4: leap_cd_duration
        5: leap_vertical_bias
        6: knockback_vertical_bias
        7: knockback_multiplier
        8: health_effect_radius_min
        9: health_effect_radius_max
        10: damage_cycle_duration
        11: instructions_duration

    player:
        0: leap_cd_counter
        1: latest_hero
        2: seconds_ingame
        3: damage_cycle_array
        4: dps
        5: damage_per_cycle
        6: heal_over_time_id
}



disabled rule("For hosts")
{
    event
    {
        Ongoing - Global;
    }
}



rule("Settings")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Set Global Variable(score_to_win, 30);
        Set Global Variable(height, 5);
        Set Global Variable(passive_heal_per_sec, 115);
        Set Global Variable(leap_speed, 45);
        Set Global Variable(leap_cd_duration, 7.500);

        "The leap direction is one part the direction you're facing and 'leap_vertical_bias' parts vertical"
        Set Global Variable(leap_vertical_bias, 0.150);
        Set Global Variable(knockback_vertical_bias, 2.300);
        Set Global Variable(knockback_multiplier, 0.230);
        Set Global Variable(health_effect_radius_min, 0.350);
        Set Global Variable(health_effect_radius_max, 0.750);

        "The damage leaderboard is based on damage dealt over the past 'damage_cycle_duration' seconds"
        Set Global Variable(damage_cycle_duration, 60);
        Set Global Variable(instructions_duration, 30);
    }
}



disabled rule("Housekeeping")
{
    event
    {
        Ongoing - Global;
    }
}



rule("Initialise global entities")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        "Center"
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String(
                "First to {0}",
                Global Variable(score_to_win),
                Null,
                Null
            ),
            Null,
            Top,
            -1.000,
            White,
            White,
            White,
            Visible To and String,
            Visible Always
        );
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String(" ", Null, Null, Null),
            Null,
            Top,
            1,
            White,
            White,
            White,
            Visible To and String,
            Visible Always
        );

        "Left"
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String(
                "Swap heroes: crouch + ult (might take multiple tries to get to the correct screen)",
                Null,
                Null,
                Null
            ),
            Null,
            Left,
            -999.000,
            White,
            White,
            White,
            Visible To and String,
            Visible Always
        );
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String("Leap: interact", Null, Null, Null),
            Null,
            Left,
            -998.000,
            White,
            White,
            White,
            Visible To and String,
            Visible Always
        );
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String(" ", Null, Null, Null),
            Null,
            Left,
            -997.000,
            White,
            White,
            White,
            Visible To and String,
            Visible Always
        );
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String(
                "Damage leaderboard ({0} sec)",
                Global Variable(damage_cycle_duration),
                Null,
                Null
            ),
            Null,
            Left,
            -996.000,
            White,
            White,
            White,
            Visible To and String,
            Visible Always
        );

        "Beams"
        Create Beam Effect(
            All Players(All Teams),
            Good Beam,
            Vector(-20.000, Global Variable(height), -20.000),
            Vector(-20.000, Global Variable(height), 20),
            Red,
            Visible To
        );
        Create Beam Effect(
            All Players(All Teams),
            Good Beam,
            Vector(-20.000, Global Variable(height), -20.000),
            Vector(20, Global Variable(height), -20.000),
            Green,
            Visible To
        );
        Create Beam Effect(
            All Players(All Teams),
            Good Beam,
            Vector(20, Global Variable(height), 20),
            Vector(-20.000, Global Variable(height), 20),
            Blue,
            Visible To
        );
        Create Beam Effect(
            All Players(All Teams),
            Good Beam,
            Vector(20, Global Variable(height), 20),
            Vector(20, Global Variable(height), -20.000),
            Yellow,
            Visible To
        );

        "Instructions"
        Create In-World Text(
            Filtered Array(
                All Players(All Teams),
                Compare(
                    Player Variable(Current Array Element, seconds_ingame),
                    <,
                    Global Variable(instructions_duration)
                )
            ),
            Custom String("Stay below the line to be healed", Null, Null, Null),
            Vector(0, 3, 0),
            1,
            Do Not Clip,
            Visible To and String,
            White,
            Visible Never
        );
        Create In-World Text(
            Filtered Array(
                All Players(All Teams),
                Compare(
                    Player Variable(Current Array Element, seconds_ingame),
                    <,
                    Global Variable(instructions_duration)
                )
            ),
            Custom String("Swap heroes: crouch + ult", Null, Null, Null),
            Vector(0, 2, 0),
            1,
            Do Not Clip,
            Visible To and String,
            White,
            Visible Never
        );
        Create In-World Text(
            Filtered Array(
                All Players(All Teams),
                Compare(
                    Player Variable(Current Array Element, seconds_ingame),
                    <,
                    Global Variable(instructions_duration)
                )
            ),
            Custom String("Leap: interact", Null, Null, Null),
            Vector(0, 1, 0),
            1,
            Do Not Clip,
            Visible To and String,
            White,
            Visible Never
        );
    }
}



rule("Initialise player entities")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        "Leap cooldown"
        Create HUD Text(
            Filtered Array(
                Event Player,
                Compare(Player Variable(Event Player, leap_cd_counter), >, 0)
            ),
            Null,
            Custom String("Leap cooldown", Null, Null, Null),
            Null,
            Top,
            2,
            White,
            White,
            White,
            Visible To and String,
            Visible Never
        );

        "One extra square is appended to each element as a trailing characters over one byte is deleted on pasting"
        Create HUD Text(
            Filtered Array(
                Event Player,
                Compare(Player Variable(Event Player, leap_cd_counter), >, 0)
            ),
            Null,
            Null,
            Value In Array(
                Append To Array(
                    Append To Array(
                        Append to Array(
                            Append to Array(
                                Append to Array(
                                    Append to Array(
                                        Append to Array(
                                            Append to Array(
                                                Append to Array(
                                                    Append to Array(
                                                        Empty Array,
                                                        Custom String(
                                                            "‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°",
                                                            Null,
                                                            Null,
                                                            Null
                                                        )
                                                    ),
                                                    Custom String(
                                                        "‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°",
                                                        Null,
                                                        Null,
                                                        Null
                                                    )
                                                ),
                                                Custom String(
                                                    "‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°",
                                                    Null,
                                                    Null,
                                                    Null
                                                )
                                            ),
                                            Custom String(
                                                "‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°",
                                                Null,
                                                Null,
                                                Null
                                            )
                                        ),
                                        Custom String(
                                            "‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°",
                                            Null,
                                            Null,
                                            Null
                                        )
                                    ),
                                    Custom String(
                                        "‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°",
                                        Null,
                                        Null,
                                        Null
                                    )
                                ),
                                Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°", Null, Null, Null)
                            ),
                            Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°", Null, Null, Null)
                        ),
                        Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°", Null, Null, Null)
                    ),
                    Custom String("‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°", Null, Null, Null)
                ),
                Round To Integer(
                    Multiply(
                        10,
                        Divide(
                            Player Variable(Event Player, leap_cd_counter),
                            Global Variable(leap_cd_duration)
                        )
                    ),
                    Down
                )
            ),
            Top,
            3,
            White,
            White,
            Blue,
            Visible To and String,
            Visible Never
        );

        "Damage leaderboard entry. Functional sort values must be between -1000 and 1000 and a higher sort value gives a lower visual position, so 'damage_per_cycle' is shrunken and negated."
        Create HUD Text(
            All Players(All Teams),
            Null,
            Custom String(
                "{0} {1}....{2}",
                Custom String(
                    "{0}. {1}",
                    Add(
                        Index Of Array Value(
                            Sorted Array(
                                All Players(All Teams),
                                Multiply(
                                    Player Variable(
                                        Current Array Element,
                                        damage_per_cycle
                                    ),
                                    -1.000
                                )
                            ),
                            Event Player
                        ),
                        1
                    ),
                    Hero Icon String(Hero Of(Event Player)),
                    Null
                ),
                Round To Integer(
                    Player Variable(Event Player, damage_per_cycle),
                    To Nearest
                ),
                Event Player
            ),
            Null,
            Left,
            Divide(Player Variable(Event Player, damage_per_cycle), -100.000),
            White,
            White,
            White,
            Visible To Sort Order and String,
            Visible Always
        );

        "Health effects"
        Create Effect(
            Filtered Array(
                All Players(All Teams),
                And(
                    And(
                        Compare(Normalized Health(Event Player), >=, 0.600),
                        Compare(Current Array Element, !=, Event Player)
                    ),
                    Is Alive(Event Player)
                )
            ),
            Good Aura,
            Green,
            Event Player,
            Add(
                Global Variable(health_effect_radius_min),
                Multiply(
                    Subtract(
                        Global Variable(health_effect_radius_max),
                        Global Variable(health_effect_radius_min)
                    ),
                    Subtract(1, Normalized Health(Event Player))
                )
            ),
            Visible To Position and Radius
        );
        Create Effect(
            Filtered Array(
                All Players(All Teams),
                And(
                    And(
                        And(
                            Compare(Normalized Health(Event Player), >=, 0.200),
                            Compare(Normalized Health(Event Player), <, 0.800)
                        ),
                        Compare(Current Array Element, !=, Event Player)
                    ),
                    Is Alive(Event Player)
                )
            ),
            Good Aura,
            Orange,
            Event Player,
            Add(
                Global Variable(health_effect_radius_min),
                Multiply(
                    Subtract(
                        Global Variable(health_effect_radius_max),
                        Global Variable(health_effect_radius_min)
                    ),
                    Subtract(1, Normalized Health(Event Player))
                )
            ),
            Visible To Position and Radius
        );
        Create Effect(
            Filtered Array(
                All Players(All Teams),
                And(
                    And(
                        Compare(Normalized Health(Event Player), <, 0.400),
                        Compare(Current Array Element, !=, Event Player)
                    ),
                    Is Alive(Event Player)
                )
            ),
            Good Aura,
            Red,
            Event Player,
            Add(
                Global Variable(health_effect_radius_min),
                Multiply(
                    Subtract(
                        Global Variable(health_effect_radius_max),
                        Global Variable(health_effect_radius_min)
                    ),
                    Subtract(1, Normalized Health(Event Player))
                )
            ),
            Visible To Position and Radius
        );
    }
}



rule("Initialise player variables")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Set Player Variable(Event Player, leap_cd_counter, 0);
        Set Player Variable(Event Player, latest_hero, Null);
        Set Player Variable(Event Player, seconds_ingame, 0);
        Set Player Variable(Event Player, dps, 0);
        Set Player Variable(Event Player, damage_cycle_array, Empty Array);
        Set Player Variable(Event Player, damage_per_cycle, 0);
    }
}



rule("Skip assembly")
{
    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Assembling Heroes == True;
    }

    actions
    {
        Set Match Time(0);
    }
}



rule("Disable")
{
    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    actions
    {
        Disable Inspector Recording;
        Disable Built-In Game Mode Scoring;
        Disable Built-In Game Mode Completion;
        Set Match Time(0);
    }
}



disabled rule("Core")
{
    event
    {
        Ongoing - Global;
    }
}



rule("Leap")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Interact) == True;
        Player Variable(Event Player, leap_cd_counter) <= 0;
        Has Status(Event Player, Hacked) == False;
        Has Status(Event Player, Knocked Down) == False;
        Has Status(Event Player, Asleep) == False;
        Has Status(Event Player, Frozen) == False;
        Has Status(Event Player, Rooted) == False;
        Has Status(Event Player, Stunned) == False;
    }

    actions
    {
        Apply Impulse(
            Event Player,
            Add(
                Facing Direction Of(Event Player),
                Multiply(Up, Global Variable(leap_vertical_bias))
            ),
            Global Variable(leap_speed),
            To World,
            Cancel Contrary Motion
        );
        Set Player Variable(
            Event Player,
            leap_cd_counter,
            Global Variable(leap_cd_duration)
        );
    }
}



rule("Chase 'leap_cd_counter'")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Chase Player Variable At Rate(
            Event Player,
            leap_cd_counter,
            0,
            1,
            None
        );
    }
}



rule("Passive heal start")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Y Component Of(Position Of(Event Player)) < Global Variable(height);
    }

    actions
    {
        Start Heal Over Time(
            Event Player,
            Null,
            9999,
            Global Variable(passive_heal_per_sec)
        );
        Set Player Variable(
            Event Player,
            heal_over_time_id,
            Last Heal Over Time ID
        );
    }
}



rule("Passive heal stop")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Y Component Of(Position Of(Event Player)) >= Global Variable(height);
    }

    actions
    {
        Stop Heal Over Time(Player Variable(Event Player, heal_over_time_id));
    }
}



rule("Handle spawn")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        And(Has Spawned(Event Player), Is Alive(Event Player)) == True;
    }

    actions
    {
        Teleport(
            Event Player,
            Vector(Random Real(-18.000, 18), 38, Random Real(-18.000, 18))
        );
        Heal(Event Player, Null, 999);
    }
}



rule("Handle death")
{
    event
    {
        Player Died;
        All;
        All;
    }

    actions
    {
        If(Compare(Attacker, ==, Victim));
            Modify Player Score(Victim, -1.000);
            Modify Team Score(Team Of(Victim), -1.000);
        Else;
            Modify Player Score(Attacker, 1);
            Modify Team Score(Team Of(Attacker), 1);
        End;
    }
}



rule("Handle damage")
{
    event
    {
        Player Took Damage;
        All;
        All;
    }

    conditions
    {
        Attacker != Victim;
    }

    actions
    {
        Modify Player Variable(Attacker, dps, Add, Event Damage);
        Modify Player Variable(Attacker, damage_per_cycle, Add, Event Damage);
        Apply Impulse(
            Victim,
            Add(
                Normalize(
                    Vector Towards(Position Of(Attacker), Position Of(Victim))
                ),
                Multiply(Up, Global Variable(knockback_vertical_bias))
            ),
            Multiply(Event Damage, Global Variable(knockback_multiplier)),
            To World,
            Incorporate Contrary Motion
        );
    }
}



rule("Manage damage leaderboard")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    actions
    {
        Set Player Variable At Index(
            Event Player,
            damage_cycle_array,
            Modulo(
                Player Variable(Event Player, seconds_ingame),
                Global Variable(damage_cycle_duration)
            ),
            Player Variable(Event Player, dps)
        );
        Modify Player Variable(Event Player, seconds_ingame, Add, 1);
        Modify Player Variable(
            Event Player,
            damage_per_cycle,
            Subtract,
            Value In Array(
                Player Variable(Event Player, damage_cycle_array),
                Modulo(
                    Player Variable(Event Player, seconds_ingame),
                    Global Variable(damage_cycle_duration)
                )
            )
        );
        Set Player Variable(Event Player, dps, 0);
        Wait(1, Ignore Condition);
        Loop;
    }
}



rule("Show health remaining")
{
    event
    {
        Player Died;
        All;
        All;
    }

    conditions
    {
        Victim != Attacker;
    }

    actions
    {
        Small Message(
            Event Player,
            Custom String(
                "{2} killed you with {0} ({1}%) health remaining",
                Health(Attacker),
                Multiply(Normalized Health(Attacker), 100),
                Attacker
            )
        );
    }
}



rule("Swap heroes")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Crouch) == True;
        Is Button Held(Event Player, Ultimate) == True;
        Is Alive(Event Player) == True;
    }

    actions
    {
        "Only subtract a point if the player isn't at full health and the lobby isn't empty"
        If(
            And(
                Compare(Normalized Health(Event Player), !=, 1),
                Compare(
                    Filtered Array(
                        All Players(All Teams),
                        Compare(Current Array Element, !=, Event Player)
                    ),
                    !=,
                    Empty Array
                )
            )
        );
            Modify Player Score(Event Player, -1.000);
            Modify Team Score(Team Of(Event Player), -1.000);
        End;

        "Credit: Beemoo's aim arena"
        Set Player Allowed Heroes(
            Event Player,
            Remove From Array(
                Allowed Heroes(Event Player),
                Hero Of(Event Player)
            )
        );
        Wait(0.200, Ignore Condition);
        Reset Player Hero Availability(Event Player);
    }
}



rule("Hero change message")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Hero Of(Event Player) != Player Variable(Event Player, latest_hero);
        Hero Of(Event Player) == True;
    }

    actions
    {
        Small Message(
            Remove From Array(All Players(All Teams), Event Player),
            Custom String(
                "{0} {1} -> {2}",
                Event Player,
                Hero Icon String(Player Variable(Event Player, latest_hero)),
                Hero Icon String(Hero Of(Event Player))
            )
        );

        "Avoid race condition with Set Player Variable executing before Small Message"
        Wait(0.100, Ignore Condition);
        Set Player Variable(Event Player, latest_hero, Hero Of(Event Player));
    }
}



rule("End game")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Or(
            Compare(Score Of(Event Player), >=, Global Variable(score_to_win)),
            Compare(
                Team Score(Team Of(Event Player)),
                >=,
                Global Variable(score_to_win)
            )
        ) == True;
    }

    actions
    {
        Declare Player Victory(Event Player);
        Declare Team Victory(Team Of(Event Player));
    }
}



disabled rule("Testing")
{
    event
    {
        Ongoing - Global;
    }
}



disabled rule("Show position")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Create HUD Text(
            Event Player,
            Null,
            Null,
            Custom String(
                "pos: {0} eye height: {1}",
                Position Of(Event Player),
                Y Component Of(Eye Position(Event Player)),
                Null
            ),
            Left,
            0,
            White,
            White,
            White,
            Visible To and String,
            Default Visibility
        );
    }
}



disabled rule("Killbind (crouch)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Crouch) == True;
    }

    actions
    {
        Kill(Event Player, Null);
    }
}



disabled rule("Take damage (reload)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Reload) == True;
    }

    actions
    {
        Damage(Event Player, Null, 20);
    }
}



disabled rule("Create dummy (crouch+reload)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Crouch) == True;
        Is Button Held(Event Player, Reload) == True;
    }

    actions
    {
        Create Dummy Bot(
            Random Value In Array(Allowed Heroes(Event Player)),
            All Teams,
            -1.000,
            Vector(0, 0, 0),
            Vector(0, 0, 0)
        );
    }
}



disabled rule("Server stats")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Create HUD Text(
            All Players(All Teams),
            Custom String("Load: {0}", Server Load, Null, Null),
            Null,
            Null,
            Left,
            0,
            White,
            White,
            White,
            Visible To and String,
            Default Visibility
        );
        Create HUD Text(
            All Players(All Teams),
            Custom String("Avg: {0}", Server Load Average, Null, Null),
            Null,
            Null,
            Left,
            0,
            White,
            White,
            White,
            Visible To and String,
            Default Visibility
        );
        Create HUD Text(
            All Players(All Teams),
            Custom String("Peak: {0}", Server Load Peak, Null, Null),
            Null,
            Null,
            Left,
            0,
            White,
            White,
            White,
            Visible To and String,
            Default Visibility
        );
    }
}


