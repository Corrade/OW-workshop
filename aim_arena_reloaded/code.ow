/*
Description ___________________________________________________________________

A different flavour of Beemoo's aim arena. Features an auto-reload + CD reset after each elimination, and takes place in Hanamura.    [v1.0 by Corrade]



Settings ______________________________________________________________________

Modes
    - Deathmatch
        - Spawn Health Packs: Disabled
Maps
    - Deathmatch
        - Hanamura

Heroes
    - General
        - Ultimate Generation: 10%
    - Disabled
        - Bastion
        - Brigitte
        - D.Va
        - Moira
        - Orisa
        - Reinhardt
        - Roadhog
        - Winston
        - Wrecking Ball
        - Zarya
    - Baptiste
        - Immortality Field: Off
    - Symmetra
        - Sentry Turret: Off
    - Torbjorn
        - Deploy Turret: Off



Variables _____________________________________________________________________

gA = Time limit.
gB = Allowed heroes.
gC = Arena dimensions based on a parallelogram. The Y components of A, B and D are irrelevant.
          A   B
        D   C
    [0] = Vector A.
    [1] = Vector B.
    [2] = Vector D.
    [3] = Approx. ceiling height.
    [4] = Approx. floor height.
    [5] = Point for respawning players to be set facing towards.
gD = Array of vectors: spawns must be in LOS of at least one of these points.
gE = Damage rank damage sample size in seconds. Up to the last gE seconds of damage will be tracked.
gF = Time until reveal in seconds.

pA = Damage UI reference.
pB = Number of seconds spent in-game.
pC = Damage rank (0..12 at most).
pD = Damage dealt over the last second.
pE = Proposed spawn for smart respawn. Resting value = 0. Also a checkpoint in smart respawn.
pF = Array storing the damage dealt over the last gE seconds in second-long chunks.
pG = Damage dealt over the last gE seconds.
pH = Reveal UI references.
    [0] = Global icon.
    [1] = Local effect.
pK = Parameter list for teleport module. If an argument is 999, the module applies special values.
    [0] = Trigger = 999. Resting value = 0. Also a checkpoint in teleport module.
    [1] = Teleport destination.
    [2] = Exit facing direction.
    [3] = Exit velocity.
pM = Triggers refresh if 999. Resting value = 0. Also a checkpoint in refresh.
pN = Whether or not the player variables have finished initialising.
*/



// Housekeeping _______________________________________________________________

disabled rule("Housekeeping") {event {Ongoing - Global;}}

rule("[Change me!] Set time limit (seconds) and time until reveal (seconds)")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Set Global Variable(A, 2700);
        Set Global Variable(F, 5);
    }
}

rule("Init gB")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Set Global Variable(B, Allowed Heroes(Event Player));
    }
}

rule("Init uninitialised global vars and static UI")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Set Global Variable(C, Empty Array);
            /*
                Ilios Ruins
                Modify Global Variable(C, Append To Array, Vector(-29, 101, -107));
                Modify Global Variable(C, Append To Array, Vector(61, 107, -109));
                Modify Global Variable(C, Append To Array, Vector(-30, 101, -98));
                Modify Global Variable(C, Append To Array, 150);
                Modify Global Variable(C, Append To Array, 90);
                Modify Global Variable(C, Append To Array, Vector(28.5, 106, -105));
            */
            Modify Global Variable(C, Append To Array, Vector(94, 0, 42));
            Modify Global Variable(C, Append To Array, Vector(97, 0, 96));
            Modify Global Variable(C, Append To Array, Vector(36, 0, 59));
            Modify Global Variable(C, Append To Array, 3);
            Modify Global Variable(C, Append To Array, -3);
            Modify Global Variable(C, Append To Array, Vector(66, -2, 64));
        Set Global Variable(D, Empty Array);
            Modify Global Variable(D, Append To Array, Vector(70, -2.5, 74));
            Modify Global Variable(D, Append To Array, Vector(64, -2.5, 90));
        Set Global Variable(E, 60);

        Create HUD Text(
            All Players(All Teams),
            Null,
            String(
                "{0}: {1}",
                String(
                    "{0} {1}",
                    String("Pick", Null, Null, Null),
                    String("Hero", Null, Null, Null),
                    Null
                ),
                String(
                    "{0} {1}",
                    String("Interact", Null, Null, Null),
                    String(
                        "({0})",
                        String(
                            "{0}: {1}",
                            Hero(Symmetra),
                            String(
                                "{0} and {1}",
                                String("Crouch", Null, Null, Null),
                                String("Interact", Null, Null, Null),
                                Null
                            ),
                            Null
                        ),
                        Null,
                        Null
                    ),
                    Null
                ),
                Null
            ),
            Null,
            Left,
            -2,
            White,
            White,
            White,
            Visible To and String
        );
        Create HUD Text(
            All Players(All Teams),
            Null,
            String(
                "{0}:",
                String(
                    "{0} / {1}",
                    String("Damage", Null, Null, Null),
                    String("Min", Empty Array, Null, Null),
                    Null
                ),
                Null,
                Null
            ),
            Null,
            Left,
            -1,
            White,
            White,
            White,
            Visible To and String
        );
    }
}

rule("Skip assembly")
{
    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Assembling Heroes == True;
    }

    actions
    {
        Set Match Time(0);
    }
}

rule("Apply game settings")
{
    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    actions
    {
        Disable Built-In Game Mode Scoring;
        Set Match Time(Global Variable(A));
    }
}



// Core _______________________________________________________________________

disabled rule("Core") {event {Ongoing - Global;}}

rule("Scoring")
{
    event
    {
        Player Died;
        All;
        All;
    }
    
    actions
    {
        Skip If(Compare(Victim, ==, Attacker), 1);
            Modify Player Score(Attacker, 1);
        Skip If(Compare(Victim, !=, Attacker), 1);
            Modify Player Score(Victim, -1);
    }
}

// Display the remaining health of the attacker after being eliminated.
// Also triggers refresh for the attacker.
rule("Health check")
{
    event
    {
        Player Died;
        All;
        All;
    }

    conditions
    {
        Entity Exists(Attacker) == True;
        Attacker != Event Player;
    }

    actions
    {
        Small Message(
            Event Player,
            String(
                "{0} {1} {2}",
                Health(Attacker),
                String("Remaining", Null, Null, Null),
                String(
                    "({0})",
                    String(
                        "{0}%",
                        Multiply(Normalized Health(Attacker), 100),
                        Null,
                        Null
                    ),
                    Null,
                    Null
                )
            )
        );

        Set Player Variable(Attacker, M, 1);
    }
}

rule("Instant respawn")
{
    event
    {
        Player Died;
        All;
        All;
    }

    actions
    {
        Respawn(Event Player);
    }
}

// Respawns the player in a random position in the arena.
// Pt1: generates an appropriate spawn and then prepares a call to
// teleport module.
rule("Smart respawn pt1")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
    }

    actions
    {
        // Loop: generate spawn.
            // A random point in the arena parallelogram disregarding height.
            // See notes on gC.
            Set Player Variable(
                Event Player,
                E,
                Add(
                    Value In Array(Global Variable(C), 0),
                    Add(
                        Multiply(
                            Random Real(0, 1),
                            Vector Towards(
                                Value In Array(Global Variable(C), 0),
                                Value In Array(Global Variable(C), 1)
                            )
                        ),
                        Multiply(
                            Random Real(0, 1),
                            Vector Towards(
                                Value In Array(Global Variable(C), 0),
                                Value In Array(Global Variable(C), 2)
                            )
                        )
                    )
                )
            );
            // The point on the floor directly beneath the previous point.
            Set Player Variable(
                Event Player,
                E,
                Ray Cast Hit Position(
                    Vector(
                        X Component Of(Player Variable(Event Player, E)),
                        // Ensures that the ceiling is in space.
                        Subtract(Value In Array(Global Variable(C), 3), 1),
                        Z Component Of(Player Variable(Event Player, E))
                    ),
                    Vector(
                        X Component Of(Player Variable(Event Player, E)),
                        Subtract(Value In Array(Global Variable(C), 4), 1),
                        Z Component Of(Player Variable(Event Player, E))
                    ),
                    Null,
                    Null,
                    False
                )
            );
            Wait(0.016, Restart When True);
        // Loop if the raycast failed or if the point does not have LOS
        // with any point in gD.
        Loop If(
            Or(
                Compare(Player Variable(Event Player, E), ==, Value In Array(Global Variable(C), 4)),
                Not(Filtered Array(
                    Global Variable(D),
                    Is In Line Of Sight(
                        Current Array Element,
                        Add(Player Variable(Event Player, E), Vector(0, 1, 0)),
                        Barriers Do Not Block LOS
                    )
                ))
            )
        );

        Set Player Variable At Index(Event Player, K, 1, Player Variable(Event Player, E));
        Set Player Variable At Index(Event Player, K, 2, 999);
        Set Player Variable At Index(Event Player, K, 3, 0);
        Set Player Variable(Event Player, E, 1);
    }
}

// Pt2: activates teleport module as soon as it's free.
rule("Smart respawn pt2")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, E) == 1;
        Value In Array(Player Variable(Event Player, K), 0) == 0;
    }

    actions
    {
        Set Player Variable At Index(Event Player, K, 0, 999);
        Set Player Variable(Event Player, E, 0);
    }
}

// Respawns the player in place in order to reset cooldowns, cleanse, etc.
rule("Refresh")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, M) == 1;
        Value In Array(Player Variable(Event Player, K), 0) == 0;
    }

    actions
    {
        Set Player Variable At Index(Event Player, K, 1, Position Of(Event Player));
        Set Player Variable At Index(Event Player, K, 2, Facing Direction Of(Event Player));
        Set Player Variable At Index(Event Player, K, 3, Velocity Of(Event Player));
        Respawn(Event Player);
        Set Player Variable At Index(Event Player, K, 0, 999);

        Set Player Variable(Event Player, M, 0);
    }
}

// Reveals the player after a certain amount of time spent hiding.
rule("Reveal")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

	conditions
	{
		Filtered Array(
            Remove From Array(All Players(All Teams), Event Player),
            Is In Line of Sight(Position Of(Event Player), Position Of(Current Array Element), Barriers Do Not Block LOS)
        ) == Empty Array;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(Global Variable(F), Abort When False);

		Small Message(Event Player, String("Revealed", Null, Null, Null));
		Create Icon(
            Remove From Array(All Players(All Teams), Event Player),
            Eye Position(Event Player),
            Arrow: Down,
			Visible To and Position,
            Red,
            True
        );
		Set Player Variable At Index(Event Player, H, 0, Last Created Entity);
	    Create Effect(Event Player, Light Shaft, Red, Position Of(Event Player), 1.5, Position and Radius);
		Set Player Variable At Index(Event Player, H, 1, Last Created Entity);
	}
}

rule("Unreveal regularly")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

	conditions
	{
        Filtered Array(
            Remove From Array(All Players(All Teams), Event Player),
            Is In Line of Sight(Position Of(Event Player), Position Of(Current Array Element), Barriers Do Not Block LOS)
        ) != Empty Array;
	}

	actions
	{
		Destroy Icon(Value In Array(Player Variable(Event Player, H), 0));
		Destroy Effect(Value In Array(Player Variable(Event Player, H), 1));
	}
}

rule("Unreveal on death")
{
    event
    {
        Player Died;
        All;
        All;
    }

    actions
    {
		Destroy Icon(Value In Array(Player Variable(Event Player, H), 0));
		Destroy Effect(Value In Array(Player Variable(Event Player, H), 1));
    }
}

// Hero select. Also resets the time and damage tracking variables of a player.
rule("Hero select")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Interact) == True;
        Or(
            Compare(Hero Of(Event Player), !=, Hero(Symmetra)),
            And(
                Compare(Hero Of(Event Player), ==, Hero(Symmetra)),
                Is Button Held(Event Player, Crouch)
            )
        ) == True;
        Is Alive(Event Player) == True;
    }

    actions
    {
        Skip If(
            Compare(Normalized Health(Event Player), ==, 1),
            1
        );
        Modify Player Score(Event Player, -1);

        // Taken from the original aim arena (Beemoo).
        Set Player Allowed Heroes(Event Player, Remove From Array(Global Variable(B), Hero Of(Event Player)));
        Wait(0.25, Ignore Condition);
        Set Player Allowed Heroes(Event Player, Global Variable(B));
        
        Set Player Variable(Event Player, B, 0);
        Set Player Variable(Event Player, D, 0);
        Set Player Variable(Event Player, F, Empty Array);
        Set Player Variable(Event Player, G, 0);
    }
}



// Damage UI __________________________________________________________________

disabled rule("Damage UI") {event {Ongoing - Global;}}

rule("Init damage UI")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Set Player Variable(Event Player, A, -1);
        Set Player Variable(Event Player, C, -1);
    }
}

rule("Update damage UI")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, C) != Index Of Array Value(
            Sorted Array(
                All Players(All Teams),
                Multiply(Player Variable(Current Array Element, G), -1)
            ),
            Event Player
        );
    }

    actions
    {
        Set Player Variable(
            Event Player,
            C,
            Index Of Array Value(
                Sorted Array(
                    All Players(All Teams),
                    Multiply(Player Variable(Current Array Element, G), -1)
                ),
                Event Player
            )
        );

        Destroy HUD Text(Player Variable(Event Player, A));
        Create HUD Text(
            All Players(All Teams),
            Null,
            Null,
            String(
                "{0}: {1}",
                String(
                    "{0} {1}",
                    Hero Icon String(Hero Of(Event Player)),
                    Event Player,
                    Null
                ),
                Player Variable(Event Player, G),
                Null
            ),
            Left,
            Player Variable(Event Player, C),
            White,
            White,
            White,
            Visible To and String
        );
        Set Player Variable(Event Player, A, Last Text ID);
    }
}

// Also increases pG.
rule("Fill damage buffer")
{
    event
    {
        Player Dealt Damage;
        All;
        All;
    }
    
    conditions
    {
        Is Game In Progress == True;
        Victim != Event Player;
    }

    actions
    {
        Modify Player Variable(Event Player, D, Add, Event Damage);
        Modify Player Variable(Event Player, G, Add, Event Damage);
    }
}

// Counts the number of seconds that the player has spent in-game
// and updates damage tracking variables.
rule("Count seconds and track damage")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    actions
    {
        // Loop.
	        Set Player Variable At Index(
                Event Player,
                F,
                Modulo(Player Variable(Event Player, B), Global Variable(E)),
                Player Variable(Event Player, D)
            );
            Modify Player Variable(Event Player, B, Add, 1);
            Modify Player Variable(
                Event Player,
                G,
                Subtract,
                Value In Array(
                    Player Variable(Event Player, F),
                    Modulo(Player Variable(Event Player, B), Global Variable(E))
                )
            );

            Set Player Variable(Event Player, D, 0);
            Wait(1, Ignore Condition);
        Loop;
    }
}



// Modules ____________________________________________________________________

disabled rule("Modules") {event {Ongoing - Global;}}

// This rule sequence is needed because teleporting and set facing have
// strange delays/requirements that must be waited for.
// Pt1: cancels motion.
rule("Teleport module pt1")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Player Variable(Event Player, K), 0) == 999;
    }

    actions
    {
        Apply Impulse(
            Event Player,
            Multiply(-1.000, Velocity Of(Event Player)),
            Square Root(Dot Product(Velocity Of(Event Player), Velocity Of(Event Player))),
            To World,
            Incorporate Contrary Motion
        );
        Set Gravity(Event Player, Absolute Value(0));
        Set Move Speed(Event Player, Absolute Value(0));

        Set Player Variable At Index(Event Player, K, 0, 1);
    }
}

// Pt2: ensures teleportation works.
rule("Teleport module pt2")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        // Executes once the player is not at their teleport position. If the
        // teleport destination is at the player's position before the module
        // call, this is equivalent to waiting for the respawn to trigger.
        Value In Array(Player Variable(Event Player, K), 0) == 1;
        Compare(Distance Between(Position Of(Event Player), Value In Array(Player Variable(Event Player, K), 1)), >, 1) == True;
    }

    actions
    {
        // Loop: teleport until it works, i.e. until the player is roughly at
        // the teleport position. This will ensure the teleport works in cases
        // where the destination is not at the player's position.
            Teleport(Event Player, Value In Array(Player Variable(Event Player, K), 1));
            Wait(0.016, Ignore Condition);
        Loop If Condition Is True;

        // Fork execution based on whether or not pK[2] is specified.
        Skip If(Compare(Value In Array(Player Variable(Event Player, K), 2), !=, 999), 2);
            Set Player Variable At Index(Event Player, K, 0, 3);
            Abort();
        Set Player Variable At Index(Event Player, K, 0, 2);
    }
}

// Pt3: ensures set facing works, applies the exit velocity and restores
// motion.
rule("Teleport module pt3")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Or(
            Compare(Value In Array(Player Variable(Event Player, K), 0), ==, 2),
            Compare(Value In Array(Player Variable(Event Player, K), 0), ==, 3)
        ) == True;
    }

    actions
    {
        // Loop: set facing direction until it works, i.e. until the player
        // is roughly facing in the set direction.
            // If pK[2] was unspecified, constantly update it to the vector
            // from the player to gC[5].
            Skip If(Compare(Value In Array(Player Variable(Event Player, K), 0), !=, 3), 1);
                Set Player Variable At Index(
                    Event Player,
                    K,
                    2,
                    Vector Towards(
                        Position Of(Event Player),
                        Value In Array(Global Variable(C), 5)
                    )
                );
            Set Facing(
                Event Player,
                Value In Array(Player Variable(Event Player, K), 2),
                To World
            );
            Wait(0.016, Ignore Condition);
        Loop If(Compare(Absolute Value(Subtract(1, Dot Product(Facing Direction Of(Event Player), Normalize(Value In Array(Player Variable(Event Player, K), 2))))), >, 0.050));

        Set Move Speed(Event Player, 100);
        Set Gravity(Event Player, 100);
        Apply Impulse(
            Event Player,
            Value In Array(Player Variable(Event Player, K), 3),
            Square Root(Dot Product(Value In Array(Player Variable(Event Player, K), 3), Value In Array(Player Variable(Event Player, K), 3))),
            To World,
            Incorporate Contrary Motion
        );
        
        Set Player Variable At Index(Event Player, K, 0, 0);
    }
}



// Testing ____________________________________________________________________

disabled rule("Testing") {event {Ongoing - Global;}}

disabled rule("Testing: display server performance")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Create HUD Text(
            All Players(All Teams),
            String("{0}: {1}", String("Server Load", Null, Null, Null), String("{0}%", Server Load, Null, Null), Null),
            Null,
            Null,
            Left,
            0,
            White,
            White,
            White,
            Visible To and String
        );
        Create HUD Text(
            All Players(All Teams),
            String("{0}: {1}", String("Server Load Average", Null, Null, Null), String("{0}%", Server Load Average, Null, Null), Null),
            Null,
            Null,
            Left,
            0,
            White,
            White,
            White,
            Visible To and String
        );
        Create HUD Text(
            All Players(All Teams),
            String("{0}: {1}", String("Server Load Peak", Null, Null, Null), String("{0}%", Server Load Peak, Null, Null), Null),
            Null,
            Null,
            Left,
            0,
            White,
            White,
            White,
            Visible To and String
        );
    }
}

disabled rule("Testing: increment score (a1)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Ability 1) == True;
    }

    actions
    {
        Modify Player Score(Event Player, 1);
    }
}

disabled rule("Testing: win round (primary+secondary)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Primary Fire) == True;
        Is Button Held(Event Player, Secondary Fire) == True;
    }

    actions
    {
        Set Player Variable(Event Player, D, 2);
        Set Player Variable(Value In Array(Player Variable(Event Player, F), 0), D, 1);
    }
}

disabled rule("Testing: activate refresh (secondary)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Secondary Fire) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
    }

    actions
    {
        Set Player Variable(Event Player, M, 999);
    }
}

disabled rule("Testing: killbind (any comm)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Communicating Any(Event Player) == True;
    }

    actions
    {
        Kill(Event Player, Null);
    }
}

disabled rule("Testing: reveal all players")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Create Icon(All Players(All Teams), Event Player, Arrow: Down, Visible To and Position, Green, True);
    }
}

disabled rule("Testing: show position")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    actions
    {
        Create HUD Text(All Players(All Teams), Position Of(Event Player), Null, Null, Left, 0, White, White, White, Visible To and String);
    }
}

disabled rule("Testing: toggle gravity (a1)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Ability 1) == True;
    }

    actions
    {
        Set Gravity(Event Player, Global Variable(Z));
        Set Global Variable(Z, Subtract(100, Global Variable(Z)));
    }
}

disabled rule("Testing: teleport forwards (primary)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Primary Fire) == True;
    }

    actions
    {
        Teleport(Event Player, Add(Position Of(Event Player), Multiply(Facing Direction Of(Event Player), 15)));
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}